{
  //#region  //*=========== React ===========
  "import React": {
    "prefix": "import React from 'react",
    "body": [
      "import React from 'react';"
    ]
  },
  "React.useState": {
    "prefix": "useState",
    "body": [
      "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = React.useState<$3>(${2:initial${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}})$0"
    ]
  },
  "React.useEffect": {
    "prefix": "useEff",
    "body": [
      "React.useEffect(() => {",
      "  $0",
      "}, []);"
    ]
  },
  "React.useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = React.useReducer(${0:someReducer}, {",
      "  ",
      "})"
    ]
  },
  "React.useRef": {
    "prefix": "useRef",
    "body": [
      "const ${1:someRef} = React.useRef($0)"
    ]
  },
  "React.FunctionalComponent": {
    "prefix": "export function Component",
    "body": [
      "import React from 'react';\n",
      "interface ${1:${TM_FILENAME_BASE}}Props {\n}\n",
      "export function ${1:${TM_FILENAME_BASE}}(props: ${1:${TM_FILENAME_BASE}}Props) {",
      "  return (",
      "    <div>",
      "      $0",
      "    </div>",
      "  )",
      "}"
    ]
  },
  "React.useInt": {
    "prefix": "useIntl",
    "body": [
      "const { formatMessage: fm } = useIntl();"
    ]
  },
  "React.useMutate": {
    "prefix": "useMutate",
    "body": [
      "const { mutateAysnc: do${1} } = useIntl($0);"
    ]
  },
  "Intl.FormatMessage": {
    "prefix": "fm",
    "body": [
        "fm({ id: '$0' })"
      ]
  }
}