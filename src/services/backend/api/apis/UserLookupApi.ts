/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RemoteServiceErrorResponse,
  UserData,
  UserDataListResultDto,
} from '../models';

export interface ApiIdentityUsersLookupByUsernameUserNameGetRequest {
    userName: string;
}

export interface ApiIdentityUsersLookupCountGetRequest {
    filter?: string;
}

export interface ApiIdentityUsersLookupIdGetRequest {
    id: string;
}

export interface ApiIdentityUsersLookupSearchGetRequest {
    filter?: string;
    sorting?: string;
    skipCount?: number;
    maxResultCount?: number;
}

/**
 * 
 */
export class UserLookupApi extends runtime.BaseAPI {

    /**
     */
    private apiIdentityUsersLookupByUsernameUserNameGetRaw = async (requestParameters: ApiIdentityUsersLookupByUsernameUserNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserData>> => {
        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling apiIdentityUsersLookupByUsernameUserNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/lookup/by-username/{userName}`.replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersLookupByUsernameUserNameGet = async (requestParameters: ApiIdentityUsersLookupByUsernameUserNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserData> => {
        const response = await this.apiIdentityUsersLookupByUsernameUserNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersLookupCountGetRaw = async (requestParameters: ApiIdentityUsersLookupCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> => {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['Filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/lookup/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    public apiIdentityUsersLookupCountGet = async (requestParameters: ApiIdentityUsersLookupCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> => {
        const response = await this.apiIdentityUsersLookupCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersLookupIdGetRaw = async (requestParameters: ApiIdentityUsersLookupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserData>> => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiIdentityUsersLookupIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/lookup/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersLookupIdGet = async (requestParameters: ApiIdentityUsersLookupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserData> => {
        const response = await this.apiIdentityUsersLookupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersLookupSearchGetRaw = async (requestParameters: ApiIdentityUsersLookupSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDataListResultDto>> => {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['Filter'] = requestParameters.filter;
        }

        if (requestParameters.sorting !== undefined) {
            queryParameters['Sorting'] = requestParameters.sorting;
        }

        if (requestParameters.skipCount !== undefined) {
            queryParameters['SkipCount'] = requestParameters.skipCount;
        }

        if (requestParameters.maxResultCount !== undefined) {
            queryParameters['MaxResultCount'] = requestParameters.maxResultCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/lookup/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersLookupSearchGet = async (requestParameters: ApiIdentityUsersLookupSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDataListResultDto> => {
        const response = await this.apiIdentityUsersLookupSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
