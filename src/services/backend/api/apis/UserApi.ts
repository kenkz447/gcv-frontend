/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IdentityRoleDtoListResultDto,
  IdentityUserCreateDto,
  IdentityUserDto,
  IdentityUserDtoPagedResultDto,
  IdentityUserUpdateDto,
  IdentityUserUpdateRolesDto,
  RemoteServiceErrorResponse,
} from '../models';

export interface ApiIdentityUsersByEmailEmailGetRequest {
    email: string;
}

export interface ApiIdentityUsersByUsernameUserNameGetRequest {
    userName: string;
}

export interface ApiIdentityUsersGetRequest {
    filter?: string;
    sorting?: string;
    skipCount?: number;
    maxResultCount?: number;
}

export interface ApiIdentityUsersIdDeleteRequest {
    id: string;
}

export interface ApiIdentityUsersIdGetRequest {
    id: string;
}

export interface ApiIdentityUsersIdPutRequest {
    id: string;
    identityUserUpdateDto?: IdentityUserUpdateDto;
}

export interface ApiIdentityUsersIdRolesGetRequest {
    id: string;
}

export interface ApiIdentityUsersIdRolesPutRequest {
    id: string;
    identityUserUpdateRolesDto?: IdentityUserUpdateRolesDto;
}

export interface ApiIdentityUsersPostRequest {
    identityUserCreateDto?: IdentityUserCreateDto;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    private apiIdentityUsersAssignableRolesGetRaw = async (initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityRoleDtoListResultDto>> => {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/assignable-roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersAssignableRolesGet = async (initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityRoleDtoListResultDto> => {
        const response = await this.apiIdentityUsersAssignableRolesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersByEmailEmailGetRaw = async (requestParameters: ApiIdentityUsersByEmailEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityUserDto>> => {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling apiIdentityUsersByEmailEmailGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/by-email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersByEmailEmailGet = async (requestParameters: ApiIdentityUsersByEmailEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityUserDto> => {
        const response = await this.apiIdentityUsersByEmailEmailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersByUsernameUserNameGetRaw = async (requestParameters: ApiIdentityUsersByUsernameUserNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityUserDto>> => {
        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling apiIdentityUsersByUsernameUserNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/by-username/{userName}`.replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersByUsernameUserNameGet = async (requestParameters: ApiIdentityUsersByUsernameUserNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityUserDto> => {
        const response = await this.apiIdentityUsersByUsernameUserNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersGetRaw = async (requestParameters: ApiIdentityUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityUserDtoPagedResultDto>> => {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['Filter'] = requestParameters.filter;
        }

        if (requestParameters.sorting !== undefined) {
            queryParameters['Sorting'] = requestParameters.sorting;
        }

        if (requestParameters.skipCount !== undefined) {
            queryParameters['SkipCount'] = requestParameters.skipCount;
        }

        if (requestParameters.maxResultCount !== undefined) {
            queryParameters['MaxResultCount'] = requestParameters.maxResultCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersGet = async (requestParameters: ApiIdentityUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityUserDtoPagedResultDto> => {
        const response = await this.apiIdentityUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersIdDeleteRaw = async (requestParameters: ApiIdentityUsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiIdentityUsersIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersIdDelete = async (requestParameters: ApiIdentityUsersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> => {
        await this.apiIdentityUsersIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    private apiIdentityUsersIdGetRaw = async (requestParameters: ApiIdentityUsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityUserDto>> => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiIdentityUsersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersIdGet = async (requestParameters: ApiIdentityUsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityUserDto> => {
        const response = await this.apiIdentityUsersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersIdPutRaw = async (requestParameters: ApiIdentityUsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityUserDto>> => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiIdentityUsersIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/identity/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.identityUserUpdateDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersIdPut = async (requestParameters: ApiIdentityUsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityUserDto> => {
        const response = await this.apiIdentityUsersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersIdRolesGetRaw = async (requestParameters: ApiIdentityUsersIdRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityRoleDtoListResultDto>> => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiIdentityUsersIdRolesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/identity/users/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersIdRolesGet = async (requestParameters: ApiIdentityUsersIdRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityRoleDtoListResultDto> => {
        const response = await this.apiIdentityUsersIdRolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiIdentityUsersIdRolesPutRaw = async (requestParameters: ApiIdentityUsersIdRolesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> => {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiIdentityUsersIdRolesPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/identity/users/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.identityUserUpdateRolesDto,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersIdRolesPut = async (requestParameters: ApiIdentityUsersIdRolesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> => {
        await this.apiIdentityUsersIdRolesPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    private apiIdentityUsersPostRaw = async (requestParameters: ApiIdentityUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityUserDto>> => {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/identity/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.identityUserCreateDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiIdentityUsersPost = async (requestParameters: ApiIdentityUsersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityUserDto> => {
        const response = await this.apiIdentityUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
