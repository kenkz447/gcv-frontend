/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetFeatureListResultDto,
  RemoteServiceErrorResponse,
  UpdateFeaturesDto,
} from '../models';

export interface ApiFeatureManagementFeaturesDeleteRequest {
    providerName?: string;
    providerKey?: string;
}

export interface ApiFeatureManagementFeaturesGetRequest {
    providerName?: string;
    providerKey?: string;
}

export interface ApiFeatureManagementFeaturesPutRequest {
    providerName?: string;
    providerKey?: string;
    updateFeaturesDto?: UpdateFeaturesDto;
}

/**
 * 
 */
export class FeaturesApi extends runtime.BaseAPI {

    /**
     */
    async apiFeatureManagementFeaturesDeleteRaw(requestParameters: ApiFeatureManagementFeaturesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        if (requestParameters.providerKey !== undefined) {
            queryParameters['providerKey'] = requestParameters.providerKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/feature-management/features`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiFeatureManagementFeaturesDelete(requestParameters: ApiFeatureManagementFeaturesDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiFeatureManagementFeaturesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiFeatureManagementFeaturesGetRaw(requestParameters: ApiFeatureManagementFeaturesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeatureListResultDto>> {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        if (requestParameters.providerKey !== undefined) {
            queryParameters['providerKey'] = requestParameters.providerKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/feature-management/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiFeatureManagementFeaturesGet(requestParameters: ApiFeatureManagementFeaturesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeatureListResultDto> {
        const response = await this.apiFeatureManagementFeaturesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFeatureManagementFeaturesPutRaw(requestParameters: ApiFeatureManagementFeaturesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        if (requestParameters.providerKey !== undefined) {
            queryParameters['providerKey'] = requestParameters.providerKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/feature-management/features`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateFeaturesDto,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiFeatureManagementFeaturesPut(requestParameters: ApiFeatureManagementFeaturesPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiFeatureManagementFeaturesPutRaw(requestParameters, initOverrides);
    }

}
