/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RemoteServiceErrorResponse,
  TenantCreateDto,
  TenantDto,
  TenantDtoPagedResultDto,
  TenantUpdateDto,
} from '../models';

export interface ApiMultiTenancyTenantsGetRequest {
    filter?: string;
    sorting?: string;
    skipCount?: number;
    maxResultCount?: number;
}

export interface ApiMultiTenancyTenantsIdDefaultConnectionStringDeleteRequest {
    id: string;
}

export interface ApiMultiTenancyTenantsIdDefaultConnectionStringGetRequest {
    id: string;
}

export interface ApiMultiTenancyTenantsIdDefaultConnectionStringPutRequest {
    id: string;
    defaultConnectionString?: string;
}

export interface ApiMultiTenancyTenantsIdDeleteRequest {
    id: string;
}

export interface ApiMultiTenancyTenantsIdGetRequest {
    id: string;
}

export interface ApiMultiTenancyTenantsIdPutRequest {
    id: string;
    tenantUpdateDto?: TenantUpdateDto;
}

export interface ApiMultiTenancyTenantsPostRequest {
    tenantCreateDto?: TenantCreateDto;
}

/**
 * 
 */
export class TenantApi extends runtime.BaseAPI {

    /**
     */
    async apiMultiTenancyTenantsGetRaw(requestParameters: ApiMultiTenancyTenantsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDtoPagedResultDto>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['Filter'] = requestParameters.filter;
        }

        if (requestParameters.sorting !== undefined) {
            queryParameters['Sorting'] = requestParameters.sorting;
        }

        if (requestParameters.skipCount !== undefined) {
            queryParameters['SkipCount'] = requestParameters.skipCount;
        }

        if (requestParameters.maxResultCount !== undefined) {
            queryParameters['MaxResultCount'] = requestParameters.maxResultCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/multi-tenancy/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiMultiTenancyTenantsGet(requestParameters: ApiMultiTenancyTenantsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDtoPagedResultDto> {
        const response = await this.apiMultiTenancyTenantsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMultiTenancyTenantsIdDefaultConnectionStringDeleteRaw(requestParameters: ApiMultiTenancyTenantsIdDefaultConnectionStringDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMultiTenancyTenantsIdDefaultConnectionStringDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/multi-tenancy/tenants/{id}/default-connection-string`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMultiTenancyTenantsIdDefaultConnectionStringDelete(requestParameters: ApiMultiTenancyTenantsIdDefaultConnectionStringDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMultiTenancyTenantsIdDefaultConnectionStringDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMultiTenancyTenantsIdDefaultConnectionStringGetRaw(requestParameters: ApiMultiTenancyTenantsIdDefaultConnectionStringGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMultiTenancyTenantsIdDefaultConnectionStringGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/multi-tenancy/tenants/{id}/default-connection-string`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiMultiTenancyTenantsIdDefaultConnectionStringGet(requestParameters: ApiMultiTenancyTenantsIdDefaultConnectionStringGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiMultiTenancyTenantsIdDefaultConnectionStringGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMultiTenancyTenantsIdDefaultConnectionStringPutRaw(requestParameters: ApiMultiTenancyTenantsIdDefaultConnectionStringPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMultiTenancyTenantsIdDefaultConnectionStringPut.');
        }

        const queryParameters: any = {};

        if (requestParameters.defaultConnectionString !== undefined) {
            queryParameters['defaultConnectionString'] = requestParameters.defaultConnectionString;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/multi-tenancy/tenants/{id}/default-connection-string`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMultiTenancyTenantsIdDefaultConnectionStringPut(requestParameters: ApiMultiTenancyTenantsIdDefaultConnectionStringPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMultiTenancyTenantsIdDefaultConnectionStringPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMultiTenancyTenantsIdDeleteRaw(requestParameters: ApiMultiTenancyTenantsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMultiTenancyTenantsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/multi-tenancy/tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMultiTenancyTenantsIdDelete(requestParameters: ApiMultiTenancyTenantsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMultiTenancyTenantsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiMultiTenancyTenantsIdGetRaw(requestParameters: ApiMultiTenancyTenantsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMultiTenancyTenantsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/multi-tenancy/tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiMultiTenancyTenantsIdGet(requestParameters: ApiMultiTenancyTenantsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDto> {
        const response = await this.apiMultiTenancyTenantsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMultiTenancyTenantsIdPutRaw(requestParameters: ApiMultiTenancyTenantsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMultiTenancyTenantsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/multi-tenancy/tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.tenantUpdateDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiMultiTenancyTenantsIdPut(requestParameters: ApiMultiTenancyTenantsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDto> {
        const response = await this.apiMultiTenancyTenantsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMultiTenancyTenantsPostRaw(requestParameters: ApiMultiTenancyTenantsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/multi-tenancy/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.tenantCreateDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiMultiTenancyTenantsPost(requestParameters: ApiMultiTenancyTenantsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDto> {
        const response = await this.apiMultiTenancyTenantsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
