/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetPermissionListResultDto,
  RemoteServiceErrorResponse,
  UpdatePermissionsDto,
} from '../models';

export interface ApiPermissionManagementPermissionsGetRequest {
    providerName?: string;
    providerKey?: string;
}

export interface ApiPermissionManagementPermissionsPutRequest {
    providerName?: string;
    providerKey?: string;
    updatePermissionsDto?: UpdatePermissionsDto;
}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI {

    /**
     */
    private apiPermissionManagementPermissionsGetRaw = async (requestParameters: ApiPermissionManagementPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPermissionListResultDto>> => {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        if (requestParameters.providerKey !== undefined) {
            queryParameters['providerKey'] = requestParameters.providerKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/permission-management/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    public apiPermissionManagementPermissionsGet = async (requestParameters: ApiPermissionManagementPermissionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPermissionListResultDto> => {
        const response = await this.apiPermissionManagementPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    private apiPermissionManagementPermissionsPutRaw = async (requestParameters: ApiPermissionManagementPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> => {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        if (requestParameters.providerKey !== undefined) {
            queryParameters['providerKey'] = requestParameters.providerKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/permission-management/permissions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updatePermissionsDto,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    public apiPermissionManagementPermissionsPut = async (requestParameters: ApiPermissionManagementPermissionsPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> => {
        await this.apiPermissionManagementPermissionsPutRaw(requestParameters, initOverrides);
    }

}
