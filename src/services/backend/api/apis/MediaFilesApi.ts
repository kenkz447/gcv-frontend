/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MediaFileDto,
  MediaFileDtoPagedResultDto,
} from '../models';

export interface ApiAppMediaFilesGetRequest {
    page?: number;
    pageSize?: number;
    filter?: { [key: string]: any; };
    sort?: string;
}

export interface ApiAppMediaFilesIdDeleteRequest {
    id: string;
}

export interface ApiAppMediaFilesUploadPostRequest {
    files?: Array<Blob>;
}

/**
 * 
 */
export class MediaFilesApi extends runtime.BaseAPI {

    /**
     */
    async apiAppMediaFilesGetRaw(requestParameters: ApiAppMediaFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFileDtoPagedResultDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['Filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['Sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/app/media-files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiAppMediaFilesGet(requestParameters: ApiAppMediaFilesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFileDtoPagedResultDto> {
        const response = await this.apiAppMediaFilesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAppMediaFilesIdDeleteRaw(requestParameters: ApiAppMediaFilesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAppMediaFilesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/app/media-files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAppMediaFilesIdDelete(requestParameters: ApiAppMediaFilesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAppMediaFilesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAppMediaFilesUploadPostRaw(requestParameters: ApiAppMediaFilesUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MediaFileDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.files) {
            requestParameters.files.forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/api/app/media-files/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiAppMediaFilesUploadPost(requestParameters: ApiAppMediaFilesUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MediaFileDto>> {
        const response = await this.apiAppMediaFilesUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
