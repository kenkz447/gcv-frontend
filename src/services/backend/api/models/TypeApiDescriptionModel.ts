/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PropertyApiDescriptionModel } from './PropertyApiDescriptionModel';
import {
    PropertyApiDescriptionModelFromJSON,
    PropertyApiDescriptionModelFromJSONTyped,
    PropertyApiDescriptionModelToJSON,
} from './PropertyApiDescriptionModel';

/**
 * 
 * @export
 * @interface TypeApiDescriptionModel
 */
export interface TypeApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof TypeApiDescriptionModel
     */
    baseType?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TypeApiDescriptionModel
     */
    isEnum?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypeApiDescriptionModel
     */
    enumNames?: Array<string> | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof TypeApiDescriptionModel
     */
    enumValues?: Array<any> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypeApiDescriptionModel
     */
    genericArguments?: Array<string> | null;
    /**
     * 
     * @type {Array<PropertyApiDescriptionModel>}
     * @memberof TypeApiDescriptionModel
     */
    properties?: Array<PropertyApiDescriptionModel> | null;
}

/**
 * Check if a given object implements the TypeApiDescriptionModel interface.
 */
export function instanceOfTypeApiDescriptionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TypeApiDescriptionModelFromJSON(json: any): TypeApiDescriptionModel {
    return TypeApiDescriptionModelFromJSONTyped(json, false);
}

export function TypeApiDescriptionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypeApiDescriptionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'baseType': !exists(json, 'baseType') ? undefined : json['baseType'],
        'isEnum': !exists(json, 'isEnum') ? undefined : json['isEnum'],
        'enumNames': !exists(json, 'enumNames') ? undefined : json['enumNames'],
        'enumValues': !exists(json, 'enumValues') ? undefined : json['enumValues'],
        'genericArguments': !exists(json, 'genericArguments') ? undefined : json['genericArguments'],
        'properties': !exists(json, 'properties') ? undefined : (json['properties'] === null ? null : (json['properties'] as Array<any>).map(PropertyApiDescriptionModelFromJSON)),
    };
}

export function TypeApiDescriptionModelToJSON(value?: TypeApiDescriptionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'baseType': value.baseType,
        'isEnum': value.isEnum,
        'enumNames': value.enumNames,
        'enumValues': value.enumValues,
        'genericArguments': value.genericArguments,
        'properties': value.properties === undefined ? undefined : (value.properties === null ? null : (value.properties as Array<any>).map(PropertyApiDescriptionModelToJSON)),
    };
}

