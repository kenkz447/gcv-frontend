/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IValueValidator } from './IValueValidator';
import {
    IValueValidatorFromJSON,
    IValueValidatorFromJSONTyped,
    IValueValidatorToJSON,
} from './IValueValidator';

/**
 * 
 * @export
 * @interface IStringValueType
 */
export interface IStringValueType {
    /**
     * 
     * @type {string}
     * @memberof IStringValueType
     */
    readonly name?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof IStringValueType
     */
    readonly properties?: { [key: string]: any; } | null;
    /**
     * 
     * @type {IValueValidator}
     * @memberof IStringValueType
     */
    validator?: IValueValidator;
}

/**
 * Check if a given object implements the IStringValueType interface.
 */
export function instanceOfIStringValueType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IStringValueTypeFromJSON(json: any): IStringValueType {
    return IStringValueTypeFromJSONTyped(json, false);
}

export function IStringValueTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): IStringValueType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'validator': !exists(json, 'validator') ? undefined : IValueValidatorFromJSON(json['validator']),
    };
}

export function IStringValueTypeToJSON(value?: IStringValueType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'validator': IValueValidatorToJSON(value.validator),
    };
}

