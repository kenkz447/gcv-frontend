/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ControllerApiDescriptionModel } from './ControllerApiDescriptionModel';
import {
    ControllerApiDescriptionModelFromJSON,
    ControllerApiDescriptionModelFromJSONTyped,
    ControllerApiDescriptionModelToJSON,
} from './ControllerApiDescriptionModel';

/**
 * 
 * @export
 * @interface ModuleApiDescriptionModel
 */
export interface ModuleApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ModuleApiDescriptionModel
     */
    rootPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModuleApiDescriptionModel
     */
    remoteServiceName?: string | null;
    /**
     * 
     * @type {{ [key: string]: ControllerApiDescriptionModel; }}
     * @memberof ModuleApiDescriptionModel
     */
    controllers?: { [key: string]: ControllerApiDescriptionModel; } | null;
}

/**
 * Check if a given object implements the ModuleApiDescriptionModel interface.
 */
export function instanceOfModuleApiDescriptionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ModuleApiDescriptionModelFromJSON(json: any): ModuleApiDescriptionModel {
    return ModuleApiDescriptionModelFromJSONTyped(json, false);
}

export function ModuleApiDescriptionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModuleApiDescriptionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rootPath': !exists(json, 'rootPath') ? undefined : json['rootPath'],
        'remoteServiceName': !exists(json, 'remoteServiceName') ? undefined : json['remoteServiceName'],
        'controllers': !exists(json, 'controllers') ? undefined : (json['controllers'] === null ? null : mapValues(json['controllers'], ControllerApiDescriptionModelFromJSON)),
    };
}

export function ModuleApiDescriptionModelToJSON(value?: ModuleApiDescriptionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rootPath': value.rootPath,
        'remoteServiceName': value.remoteServiceName,
        'controllers': value.controllers === undefined ? undefined : (value.controllers === null ? null : mapValues(value.controllers, ControllerApiDescriptionModelToJSON)),
    };
}

