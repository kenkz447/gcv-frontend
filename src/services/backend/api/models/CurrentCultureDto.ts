/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateTimeFormatDto } from './DateTimeFormatDto';
import {
    DateTimeFormatDtoFromJSON,
    DateTimeFormatDtoFromJSONTyped,
    DateTimeFormatDtoToJSON,
} from './DateTimeFormatDto';

/**
 * 
 * @export
 * @interface CurrentCultureDto
 */
export interface CurrentCultureDto {
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    englishName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    threeLetterIsoLanguageName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    twoLetterIsoLanguageName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentCultureDto
     */
    isRightToLeft?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    cultureName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    nativeName?: string | null;
    /**
     * 
     * @type {DateTimeFormatDto}
     * @memberof CurrentCultureDto
     */
    dateTimeFormat?: DateTimeFormatDto;
}

/**
 * Check if a given object implements the CurrentCultureDto interface.
 */
export function instanceOfCurrentCultureDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrentCultureDtoFromJSON(json: any): CurrentCultureDto {
    return CurrentCultureDtoFromJSONTyped(json, false);
}

export function CurrentCultureDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrentCultureDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'englishName': !exists(json, 'englishName') ? undefined : json['englishName'],
        'threeLetterIsoLanguageName': !exists(json, 'threeLetterIsoLanguageName') ? undefined : json['threeLetterIsoLanguageName'],
        'twoLetterIsoLanguageName': !exists(json, 'twoLetterIsoLanguageName') ? undefined : json['twoLetterIsoLanguageName'],
        'isRightToLeft': !exists(json, 'isRightToLeft') ? undefined : json['isRightToLeft'],
        'cultureName': !exists(json, 'cultureName') ? undefined : json['cultureName'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nativeName': !exists(json, 'nativeName') ? undefined : json['nativeName'],
        'dateTimeFormat': !exists(json, 'dateTimeFormat') ? undefined : DateTimeFormatDtoFromJSON(json['dateTimeFormat']),
    };
}

export function CurrentCultureDtoToJSON(value?: CurrentCultureDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'englishName': value.englishName,
        'threeLetterIsoLanguageName': value.threeLetterIsoLanguageName,
        'twoLetterIsoLanguageName': value.twoLetterIsoLanguageName,
        'isRightToLeft': value.isRightToLeft,
        'cultureName': value.cultureName,
        'name': value.name,
        'nativeName': value.nativeName,
        'dateTimeFormat': DateTimeFormatDtoToJSON(value.dateTimeFormat),
    };
}

