/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RemoteServiceValidationErrorInfo } from './RemoteServiceValidationErrorInfo';
import {
    RemoteServiceValidationErrorInfoFromJSON,
    RemoteServiceValidationErrorInfoFromJSONTyped,
    RemoteServiceValidationErrorInfoToJSON,
} from './RemoteServiceValidationErrorInfo';

/**
 * 
 * @export
 * @interface RemoteServiceErrorInfo
 */
export interface RemoteServiceErrorInfo {
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    message?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    details?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RemoteServiceErrorInfo
     */
    data?: { [key: string]: any; } | null;
    /**
     * 
     * @type {Array<RemoteServiceValidationErrorInfo>}
     * @memberof RemoteServiceErrorInfo
     */
    validationErrors?: Array<RemoteServiceValidationErrorInfo> | null;
}

/**
 * Check if a given object implements the RemoteServiceErrorInfo interface.
 */
export function instanceOfRemoteServiceErrorInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RemoteServiceErrorInfoFromJSON(json: any): RemoteServiceErrorInfo {
    return RemoteServiceErrorInfoFromJSONTyped(json, false);
}

export function RemoteServiceErrorInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): RemoteServiceErrorInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>).map(RemoteServiceValidationErrorInfoFromJSON)),
    };
}

export function RemoteServiceErrorInfoToJSON(value?: RemoteServiceErrorInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'message': value.message,
        'details': value.details,
        'data': value.data,
        'validationErrors': value.validationErrors === undefined ? undefined : (value.validationErrors === null ? null : (value.validationErrors as Array<any>).map(RemoteServiceValidationErrorInfoToJSON)),
    };
}

