/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IdentityRoleCreateDto
 */
export interface IdentityRoleCreateDto {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof IdentityRoleCreateDto
     */
    readonly extraProperties?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleCreateDto
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleCreateDto
     */
    isDefault?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleCreateDto
     */
    isPublic?: boolean;
}

/**
 * Check if a given object implements the IdentityRoleCreateDto interface.
 */
export function instanceOfIdentityRoleCreateDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function IdentityRoleCreateDtoFromJSON(json: any): IdentityRoleCreateDto {
    return IdentityRoleCreateDtoFromJSONTyped(json, false);
}

export function IdentityRoleCreateDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityRoleCreateDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'extraProperties': !exists(json, 'extraProperties') ? undefined : json['extraProperties'],
        'name': json['name'],
        'isDefault': !exists(json, 'isDefault') ? undefined : json['isDefault'],
        'isPublic': !exists(json, 'isPublic') ? undefined : json['isPublic'],
    };
}

export function IdentityRoleCreateDtoToJSON(value?: IdentityRoleCreateDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'isDefault': value.isDefault,
        'isPublic': value.isPublic,
    };
}

