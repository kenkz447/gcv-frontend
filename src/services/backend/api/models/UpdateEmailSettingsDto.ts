/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateEmailSettingsDto
 */
export interface UpdateEmailSettingsDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    smtpHost?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateEmailSettingsDto
     */
    smtpPort?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    smtpUserName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    smtpPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    smtpDomain?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateEmailSettingsDto
     */
    smtpEnableSsl?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateEmailSettingsDto
     */
    smtpUseDefaultCredentials?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    defaultFromAddress: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    defaultFromDisplayName: string;
}

/**
 * Check if a given object implements the UpdateEmailSettingsDto interface.
 */
export function instanceOfUpdateEmailSettingsDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "defaultFromAddress" in value;
    isInstance = isInstance && "defaultFromDisplayName" in value;

    return isInstance;
}

export function UpdateEmailSettingsDtoFromJSON(json: any): UpdateEmailSettingsDto {
    return UpdateEmailSettingsDtoFromJSONTyped(json, false);
}

export function UpdateEmailSettingsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateEmailSettingsDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'smtpHost': !exists(json, 'smtpHost') ? undefined : json['smtpHost'],
        'smtpPort': !exists(json, 'smtpPort') ? undefined : json['smtpPort'],
        'smtpUserName': !exists(json, 'smtpUserName') ? undefined : json['smtpUserName'],
        'smtpPassword': !exists(json, 'smtpPassword') ? undefined : json['smtpPassword'],
        'smtpDomain': !exists(json, 'smtpDomain') ? undefined : json['smtpDomain'],
        'smtpEnableSsl': !exists(json, 'smtpEnableSsl') ? undefined : json['smtpEnableSsl'],
        'smtpUseDefaultCredentials': !exists(json, 'smtpUseDefaultCredentials') ? undefined : json['smtpUseDefaultCredentials'],
        'defaultFromAddress': json['defaultFromAddress'],
        'defaultFromDisplayName': json['defaultFromDisplayName'],
    };
}

export function UpdateEmailSettingsDtoToJSON(value?: UpdateEmailSettingsDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'smtpHost': value.smtpHost,
        'smtpPort': value.smtpPort,
        'smtpUserName': value.smtpUserName,
        'smtpPassword': value.smtpPassword,
        'smtpDomain': value.smtpDomain,
        'smtpEnableSsl': value.smtpEnableSsl,
        'smtpUseDefaultCredentials': value.smtpUseDefaultCredentials,
        'defaultFromAddress': value.defaultFromAddress,
        'defaultFromDisplayName': value.defaultFromDisplayName,
    };
}

