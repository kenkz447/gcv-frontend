/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExtensionEnumDto } from './ExtensionEnumDto';
import {
    ExtensionEnumDtoFromJSON,
    ExtensionEnumDtoFromJSONTyped,
    ExtensionEnumDtoToJSON,
} from './ExtensionEnumDto';
import type { ModuleExtensionDto } from './ModuleExtensionDto';
import {
    ModuleExtensionDtoFromJSON,
    ModuleExtensionDtoFromJSONTyped,
    ModuleExtensionDtoToJSON,
} from './ModuleExtensionDto';

/**
 * 
 * @export
 * @interface ObjectExtensionsDto
 */
export interface ObjectExtensionsDto {
    /**
     * 
     * @type {{ [key: string]: ModuleExtensionDto; }}
     * @memberof ObjectExtensionsDto
     */
    modules?: { [key: string]: ModuleExtensionDto; } | null;
    /**
     * 
     * @type {{ [key: string]: ExtensionEnumDto; }}
     * @memberof ObjectExtensionsDto
     */
    enums?: { [key: string]: ExtensionEnumDto; } | null;
}

/**
 * Check if a given object implements the ObjectExtensionsDto interface.
 */
export function instanceOfObjectExtensionsDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ObjectExtensionsDtoFromJSON(json: any): ObjectExtensionsDto {
    return ObjectExtensionsDtoFromJSONTyped(json, false);
}

export function ObjectExtensionsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ObjectExtensionsDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modules': !exists(json, 'modules') ? undefined : (json['modules'] === null ? null : mapValues(json['modules'], ModuleExtensionDtoFromJSON)),
        'enums': !exists(json, 'enums') ? undefined : (json['enums'] === null ? null : mapValues(json['enums'], ExtensionEnumDtoFromJSON)),
    };
}

export function ObjectExtensionsDtoToJSON(value?: ObjectExtensionsDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'modules': value.modules === undefined ? undefined : (value.modules === null ? null : mapValues(value.modules, ModuleExtensionDtoToJSON)),
        'enums': value.enums === undefined ? undefined : (value.enums === null ? null : mapValues(value.enums, ExtensionEnumDtoToJSON)),
    };
}

