/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationLocalizationResourceDto } from './ApplicationLocalizationResourceDto';
import {
    ApplicationLocalizationResourceDtoFromJSON,
    ApplicationLocalizationResourceDtoFromJSONTyped,
    ApplicationLocalizationResourceDtoToJSON,
} from './ApplicationLocalizationResourceDto';
import type { CurrentCultureDto } from './CurrentCultureDto';
import {
    CurrentCultureDtoFromJSON,
    CurrentCultureDtoFromJSONTyped,
    CurrentCultureDtoToJSON,
} from './CurrentCultureDto';
import type { LanguageInfo } from './LanguageInfo';
import {
    LanguageInfoFromJSON,
    LanguageInfoFromJSONTyped,
    LanguageInfoToJSON,
} from './LanguageInfo';
import type { NameValue } from './NameValue';
import {
    NameValueFromJSON,
    NameValueFromJSONTyped,
    NameValueToJSON,
} from './NameValue';

/**
 * 
 * @export
 * @interface ApplicationLocalizationConfigurationDto
 */
export interface ApplicationLocalizationConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    values?: { [key: string]: { [key: string]: string; }; } | null;
    /**
     * 
     * @type {{ [key: string]: ApplicationLocalizationResourceDto; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    resources?: { [key: string]: ApplicationLocalizationResourceDto; } | null;
    /**
     * 
     * @type {Array<LanguageInfo>}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    languages?: Array<LanguageInfo> | null;
    /**
     * 
     * @type {CurrentCultureDto}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    currentCulture?: CurrentCultureDto;
    /**
     * 
     * @type {string}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    defaultResourceName?: string | null;
    /**
     * 
     * @type {{ [key: string]: Array<NameValue>; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    languagesMap?: { [key: string]: Array<NameValue>; } | null;
    /**
     * 
     * @type {{ [key: string]: Array<NameValue>; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    languageFilesMap?: { [key: string]: Array<NameValue>; } | null;
}

/**
 * Check if a given object implements the ApplicationLocalizationConfigurationDto interface.
 */
export function instanceOfApplicationLocalizationConfigurationDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplicationLocalizationConfigurationDtoFromJSON(json: any): ApplicationLocalizationConfigurationDto {
    return ApplicationLocalizationConfigurationDtoFromJSONTyped(json, false);
}

export function ApplicationLocalizationConfigurationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationLocalizationConfigurationDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'values': !exists(json, 'values') ? undefined : json['values'],
        'resources': !exists(json, 'resources') ? undefined : (json['resources'] === null ? null : mapValues(json['resources'], ApplicationLocalizationResourceDtoFromJSON)),
        'languages': !exists(json, 'languages') ? undefined : (json['languages'] === null ? null : (json['languages'] as Array<any>).map(LanguageInfoFromJSON)),
        'currentCulture': !exists(json, 'currentCulture') ? undefined : CurrentCultureDtoFromJSON(json['currentCulture']),
        'defaultResourceName': !exists(json, 'defaultResourceName') ? undefined : json['defaultResourceName'],
        'languagesMap': !exists(json, 'languagesMap') ? undefined : json['languagesMap'],
        'languageFilesMap': !exists(json, 'languageFilesMap') ? undefined : json['languageFilesMap'],
    };
}

export function ApplicationLocalizationConfigurationDtoToJSON(value?: ApplicationLocalizationConfigurationDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'values': value.values,
        'resources': value.resources === undefined ? undefined : (value.resources === null ? null : mapValues(value.resources, ApplicationLocalizationResourceDtoToJSON)),
        'languages': value.languages === undefined ? undefined : (value.languages === null ? null : (value.languages as Array<any>).map(LanguageInfoToJSON)),
        'currentCulture': CurrentCultureDtoToJSON(value.currentCulture),
        'defaultResourceName': value.defaultResourceName,
        'languagesMap': value.languagesMap,
        'languageFilesMap': value.languageFilesMap,
    };
}

