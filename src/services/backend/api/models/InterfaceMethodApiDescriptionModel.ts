/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MethodParameterApiDescriptionModel } from './MethodParameterApiDescriptionModel';
import {
    MethodParameterApiDescriptionModelFromJSON,
    MethodParameterApiDescriptionModelFromJSONTyped,
    MethodParameterApiDescriptionModelToJSON,
} from './MethodParameterApiDescriptionModel';
import type { ReturnValueApiDescriptionModel } from './ReturnValueApiDescriptionModel';
import {
    ReturnValueApiDescriptionModelFromJSON,
    ReturnValueApiDescriptionModelFromJSONTyped,
    ReturnValueApiDescriptionModelToJSON,
} from './ReturnValueApiDescriptionModel';

/**
 * 
 * @export
 * @interface InterfaceMethodApiDescriptionModel
 */
export interface InterfaceMethodApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    name?: string | null;
    /**
     * 
     * @type {Array<MethodParameterApiDescriptionModel>}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null;
    /**
     * 
     * @type {ReturnValueApiDescriptionModel}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    returnValue?: ReturnValueApiDescriptionModel;
}

/**
 * Check if a given object implements the InterfaceMethodApiDescriptionModel interface.
 */
export function instanceOfInterfaceMethodApiDescriptionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceMethodApiDescriptionModelFromJSON(json: any): InterfaceMethodApiDescriptionModel {
    return InterfaceMethodApiDescriptionModelFromJSONTyped(json, false);
}

export function InterfaceMethodApiDescriptionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceMethodApiDescriptionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'parametersOnMethod': !exists(json, 'parametersOnMethod') ? undefined : (json['parametersOnMethod'] === null ? null : (json['parametersOnMethod'] as Array<any>).map(MethodParameterApiDescriptionModelFromJSON)),
        'returnValue': !exists(json, 'returnValue') ? undefined : ReturnValueApiDescriptionModelFromJSON(json['returnValue']),
    };
}

export function InterfaceMethodApiDescriptionModelToJSON(value?: InterfaceMethodApiDescriptionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'parametersOnMethod': value.parametersOnMethod === undefined ? undefined : (value.parametersOnMethod === null ? null : (value.parametersOnMethod as Array<any>).map(MethodParameterApiDescriptionModelToJSON)),
        'returnValue': ReturnValueApiDescriptionModelToJSON(value.returnValue),
    };
}

