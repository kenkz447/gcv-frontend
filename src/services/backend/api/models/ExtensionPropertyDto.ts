/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExtensionPropertyApiDto } from './ExtensionPropertyApiDto';
import {
    ExtensionPropertyApiDtoFromJSON,
    ExtensionPropertyApiDtoFromJSONTyped,
    ExtensionPropertyApiDtoToJSON,
} from './ExtensionPropertyApiDto';
import type { ExtensionPropertyAttributeDto } from './ExtensionPropertyAttributeDto';
import {
    ExtensionPropertyAttributeDtoFromJSON,
    ExtensionPropertyAttributeDtoFromJSONTyped,
    ExtensionPropertyAttributeDtoToJSON,
} from './ExtensionPropertyAttributeDto';
import type { ExtensionPropertyUiDto } from './ExtensionPropertyUiDto';
import {
    ExtensionPropertyUiDtoFromJSON,
    ExtensionPropertyUiDtoFromJSONTyped,
    ExtensionPropertyUiDtoToJSON,
} from './ExtensionPropertyUiDto';
import type { LocalizableStringDto } from './LocalizableStringDto';
import {
    LocalizableStringDtoFromJSON,
    LocalizableStringDtoFromJSONTyped,
    LocalizableStringDtoToJSON,
} from './LocalizableStringDto';

/**
 * 
 * @export
 * @interface ExtensionPropertyDto
 */
export interface ExtensionPropertyDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyDto
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyDto
     */
    typeSimple?: string | null;
    /**
     * 
     * @type {LocalizableStringDto}
     * @memberof ExtensionPropertyDto
     */
    displayName?: LocalizableStringDto;
    /**
     * 
     * @type {ExtensionPropertyApiDto}
     * @memberof ExtensionPropertyDto
     */
    api?: ExtensionPropertyApiDto;
    /**
     * 
     * @type {ExtensionPropertyUiDto}
     * @memberof ExtensionPropertyDto
     */
    ui?: ExtensionPropertyUiDto;
    /**
     * 
     * @type {Array<ExtensionPropertyAttributeDto>}
     * @memberof ExtensionPropertyDto
     */
    attributes?: Array<ExtensionPropertyAttributeDto> | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ExtensionPropertyDto
     */
    _configuration?: { [key: string]: any; } | null;
    /**
     * 
     * @type {any}
     * @memberof ExtensionPropertyDto
     */
    defaultValue?: any | null;
}

/**
 * Check if a given object implements the ExtensionPropertyDto interface.
 */
export function instanceOfExtensionPropertyDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExtensionPropertyDtoFromJSON(json: any): ExtensionPropertyDto {
    return ExtensionPropertyDtoFromJSONTyped(json, false);
}

export function ExtensionPropertyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionPropertyDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'typeSimple': !exists(json, 'typeSimple') ? undefined : json['typeSimple'],
        'displayName': !exists(json, 'displayName') ? undefined : LocalizableStringDtoFromJSON(json['displayName']),
        'api': !exists(json, 'api') ? undefined : ExtensionPropertyApiDtoFromJSON(json['api']),
        'ui': !exists(json, 'ui') ? undefined : ExtensionPropertyUiDtoFromJSON(json['ui']),
        'attributes': !exists(json, 'attributes') ? undefined : (json['attributes'] === null ? null : (json['attributes'] as Array<any>).map(ExtensionPropertyAttributeDtoFromJSON)),
        '_configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
    };
}

export function ExtensionPropertyDtoToJSON(value?: ExtensionPropertyDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'typeSimple': value.typeSimple,
        'displayName': LocalizableStringDtoToJSON(value.displayName),
        'api': ExtensionPropertyApiDtoToJSON(value.api),
        'ui': ExtensionPropertyUiDtoToJSON(value.ui),
        'attributes': value.attributes === undefined ? undefined : (value.attributes === null ? null : (value.attributes as Array<any>).map(ExtensionPropertyAttributeDtoToJSON)),
        'configuration': value._configuration,
        'defaultValue': value.defaultValue,
    };
}

