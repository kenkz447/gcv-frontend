/* tslint:disable */
/* eslint-disable */
/**
 * Gcv API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InterfaceMethodApiDescriptionModel } from './InterfaceMethodApiDescriptionModel';
import {
    InterfaceMethodApiDescriptionModelFromJSON,
    InterfaceMethodApiDescriptionModelFromJSONTyped,
    InterfaceMethodApiDescriptionModelToJSON,
} from './InterfaceMethodApiDescriptionModel';

/**
 * 
 * @export
 * @interface ControllerInterfaceApiDescriptionModel
 */
export interface ControllerInterfaceApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    name?: string | null;
    /**
     * 
     * @type {Array<InterfaceMethodApiDescriptionModel>}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    methods?: Array<InterfaceMethodApiDescriptionModel> | null;
}

/**
 * Check if a given object implements the ControllerInterfaceApiDescriptionModel interface.
 */
export function instanceOfControllerInterfaceApiDescriptionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ControllerInterfaceApiDescriptionModelFromJSON(json: any): ControllerInterfaceApiDescriptionModel {
    return ControllerInterfaceApiDescriptionModelFromJSONTyped(json, false);
}

export function ControllerInterfaceApiDescriptionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ControllerInterfaceApiDescriptionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'methods': !exists(json, 'methods') ? undefined : (json['methods'] === null ? null : (json['methods'] as Array<any>).map(InterfaceMethodApiDescriptionModelFromJSON)),
    };
}

export function ControllerInterfaceApiDescriptionModelToJSON(value?: ControllerInterfaceApiDescriptionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'name': value.name,
        'methods': value.methods === undefined ? undefined : (value.methods === null ? null : (value.methods as Array<any>).map(InterfaceMethodApiDescriptionModelToJSON)),
    };
}

